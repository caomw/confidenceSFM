function [] = testExp(subjectID);

%
% function [] = testExp;
%


% number of trials per condition
dataPoints = 20;

% desired screen refresh rate
scrFreq = 120; % Hz

% desired screen size
xSize = 1024;
ySize = 768;

% screen parameters
whiteNL = 26; % cd/m2
blackNL = 0;  % cd/m2
grayNL  = 13; % cd/m2

lum.black = round(makeLinearKlab(blackNL));
lum.gray  = round(makeLinearKlab(grayNL));
lum.white = round(makeLinearKlab(whiteNL));


verticalOff   = [200,-200];      % pixels;
targetOri     = [1,2,4,8,16,32,45]; % degrees
maskOri       = 90;
patchSize     = 200;
envSize       = 0.125;            % relative to patch
sf            = 5;               % cycles per patchsize
targetPhase   = pi/2;               %
targetDur     = 6;               % screen refreshes (50ms);
targetMaskSOA = 6;               % screen refreshes (50ms);
maskDur       = 60;              % screen refreshes (500ms);

arrowSize     = 20;              % pixel
arrowDur      = 60;              % screen refreshes (500ms);

fixationSizeH = 3;              % pixel
fixationDur   = 60;              % screen refreshes (500ms);

% total number of trials
nTrials = dataPoints*2*2*length(ori); 


% filename 
sessionNum = 1;
while exist(sprintf('..\\dataRaw\\%s\\%s%3.3d.mat',subjectID,subjectID,testNum));
    sessionNum = sessionNum+1;
end

fileName = sprintf('..\\dataRaw\\%s\\%s%3.3d.mat',subjectID,subjectID,sessionNum)
ELName   = sprintf('test%s%3.3d.edf',subjectID,sessionNum);



% initialize random number generators to subject dependent reconstructible
% values
seed = 1e5*sessionNum+100*subjectID(1)+subjectID(2);
rand('state',seed);
randn('state',seed);

% balance over orientations
orie

% open screen
[window,rect] = Screen(0,'OpenWindow',lum.gray);

% verify screen refresh rate
t0_test = GetSecs;
Screen(window,'WaitBlanking',10);
t1_test = GetSecs;
if abs((t1_test-t0_test)/10-1/scrFreq)>1/scrFreq;
    Screen('CloseAll');
    error(sprintf('Screen rate must be within 10%% of %3.3dHz',scrFreq));
end

% verify resoultion
if any(rect~=[0 0 xSize ySize])
    Screen('CloseAll');
    error('Screen Resoultion must be x=%d, y=%d',xSize,ySize');
end


Screen(window,'DrawText','Preparing session, please wait.',0,400,300);

% background (fixation screen);
bgScreen = Screen(window,'OpenOffScreenWindow',lum.gray);
Screen(bgScreen,'FillRect',lum.black,...
    [xSize/2-fixationSizeH,...
    ySize/2-fixationSizeH,...
    xSize/2+fixationSizeH,...
    ySize/2+fixationSizeH]);

% prepare all offscreen windows
target = cell(2,2,length(targetOri)); % up/down, left/right, ori
mask   = cell(2,1);


for ud = 1 : 2

    for lr = 1 : 2

        for oriC = 1 : length(targetOri)

            % create offscreen window
            target{ud,lr,oriC} = Screen(window,'OpenOffScreenWindow',lum.gray);


            % total screen
            TT = lum.gray*ones(ySize,xSize);

            % place fixation cross
            TT((ySize/2-fixationSizeH+1):(ySize/2+fixationSizeH),...
                (xSize/2-fixationSizeH+1):(xSize/2+fixationSizeH))=...
                lum.black;

            % compute wavelet
            if lr==1
                G = makeGabor(...
                    targetOri(oriC),...
                    sf,...
                    envSize,...
                    targetPhase,...
                    patchSize);
            else    
                G = makeGabor(...
                    -targetOri(oriC),...
                    sf,...
                    envSize,...
                    targetPhase,...
                    patchSize);
            end 

            % linear G
            Glin = round(makeLinearKlab(grayNL*G/2+grayNL));

            TT((ySize/2+verticalOff(ud)-patchSize/2+1):(ySize/2+verticalOff(ud)+patchSize/2),...
                (xSize/2-patchSize/2+1):(xSize/2+patchSize/2))=Glin;

            % place TT on offscreen
            Screen(target{ud,lr,oriC},'PutImage',TT);

        end

    end

    % create offscreen window
    mask{ud} = Screen(window,'OpenOffScreenWindow',lum.gray);

    % total screen
    TT = lum.gray*ones(ySize,xSize);

    % place fixation cross
    TT((ySize/2-fixationSizeH+1):(ySize/2+fixationSizeH),...
        (xSize/2-fixationSizeH+1):(xSize/2+fixationSizeH))=...
        lum.black;

    % compute wavelet
    G = makeGabor(...
        maskOri,...
        sf,...
        envSize,...
        targetPhase,...
        patchSize);

    % linear G
    Glin = round(makeLinearKlab(grayNL*G+grayNL));

    TT((ySize/2+verticalOff(ud)-patchSize/2+1):(ySize/2+verticalOff(ud)+patchSize/2),...
        (xSize/2-patchSize/2+1):(xSize/2+patchSize/2))=Glin;

    % place TT on offscreen
    Screen(mask{ud},'PutImage',TT);

end


% Prepare arrows
for ud = 1 : 2
    arrow{ud} = Screen(window,'OpenOffscreenWindow',lum.gray);
    Screen(arrow{ud},'PutImage',makeArrow(ud,arrowSize,lum.black,lum.gray));
end

% Clear Screen and Hide Mouse pointer
Screen(window,'FillRect',lum.gray);
HideCursor;


% initialize eyetracker
el=initeyelinkdefaults;
el.backgroundcolour = lum.gray;
el.foregroundcolour = lum.black;
initEL1000(ELName);


% camera setup and calibration
fprintf('Setup...');
status=dotrackersetup(el, el.ENTER_KEY);
if status
Screen('CloseAll');
ShowCursor;
error('Setup failed');
end
fprintf('done.\n');

% driftcorrection
fprintf('Drift correction...');
status = dodriftcorrection(el,1024/2,768/2,1,1);
fprintf('done.\n');

% start recording
fprintf('Start Recording...');
status = eyelink('startrecording');
if status
Screen('CloseAll');
ShowCursor;
error('Recording failed');
end
fprintf('done.\n');


% 

% main loop here
fixOk    = nan(1,nTrials);
respKey  = nan(1,nTrials);
respTime = nan(1,nTrials);
confKey  = nan(1,nTrials);
confTime = nan(1,nTrials);

% draw random variables



%{
[...
fixOk(trial),...
respKey(trial),...
respTime(trial),...
confKey(trial),...
confTime(trial)] = ...
singleTrial(...
window,el,...
arrowDir(trial),...
position(trial),...
tiltDir(trial),...
SOA(trial));
%}

for ud=1:2
    for lr = 1:2
        for oriC = 1 : length(targetOri)
            Screen('CopyWindow',bgScreen,window);
            Screen(window,'WaitBlanking',fixationDur);     
            Screen('CopyWindow',arrow{ud},window);
            Screen(window,'WaitBlanking',arrowDur);
            Screen('CopyWindow',target{ud,lr,oriC},window);
            Screen(window,'WaitBlanking',targetDur);
            Screen('CopyWindow',bgScreen,window);
            Screen(window,'WaitBlanking',targetMaskSOA);
            Screen('CopyWindow',mask{ud},window);
            Screen(window,'WaitBlanking',maskDur);
            Screen('CopyWindow',bgScreen,window);
            while ~KbCheck end
            while KbCheck end
        end
    end

end
% stop recording

fprintf('stop recording...');
eyelink('stoprecording');
fprintf('done.\n');

% close file
fprintf('Closing file...');
eyelink('closefile');
fprintf('done.\n');

% transfer data
fprintf('Transfer data...');
% transfer eyelink result to same directory
status = eyelink('receivefile',...
ELName,...
sprintf('..\\dataRaw\\test\\%s',ELName),...
0);
if status~=0
Screen('CloseAll');
ShowCursor;
error('File transfer from EL failed, check!');
end
fprintf('done.\n');

% save parameters
fprintf('saving matlab file...');
save(fileName,'-mat');
fprintf('done.\n');

% close all on and off screens
Screen('CloseAll');

% Show Mouse pointer
ShowCursor;

% shutdown link
fprintf('Eyelink shutdown...');
eyelink('shutdown');
fprintf('done.\n');